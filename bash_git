isInString() {
  if [[ $1 == *"$2"* ]] && [ -n "$2" ]
  then
    return 0
  fi
  return 1
}

status() {
  # Get 'git status -s' with colors :)
  filelines=$(git status -s | cat)
  
  oldIFS="$IFS"
  IFS='
  '
  IFS=${IFS:0:1} # this is useful to format your code with tabs
  lines=( $filelines )
  IFS="$oldIFS"

  for index in "${!lines[@]}"
  do
      diplay_index=$(($index + 1))
      echo "$diplay_index ${lines[index]}"
  done
}

diff() {
  filelines=$(git status -s | cut -c 4-) 

  oldIFS="$IFS"
  IFS='
  '
  IFS=${IFS:0:1} # this is useful to format your code with tabs
  lines=( $filelines )
  IFS="$oldIFS"

  for index in "${!lines[@]}"
  do
    diplay_index=$(($index + 1))
    if isInString $1 $diplay_index 
    then
        git diff ${lines[index]}
      fi
  done
}

checkout() {
  filelines=$(git status -s | cut -c 4-) 

  oldIFS="$IFS"
  IFS='
  '
  IFS=${IFS:0:1} # this is useful to format your code with tabs
  lines=( $filelines )
  IFS="$oldIFS"

  for index in "${!lines[@]}"
  do
    diplay_index=$(($index + 1))
    if isInString $1 $diplay_index 
    then
        git checkout ${lines[index]}
      fi
  done
}

commit() {
  if [[ $1 == "-a" ]]
  then
    add
  fi

  read -p "Message: " message

  git commit -m "$message"
}

add() {
  status
  read -p "Files to add: " filesToAdd
  filelines=$(git status -s | cut -c 4-) 

  oldIFS="$IFS"
  IFS='
  '
  IFS=${IFS:0:1} # this is useful to format your code with tabs
  lines=( $filelines )
  IFS="$oldIFS"

  oldIFS="$IFS"
  IFS=","
  files=( $filesToAdd )
  IFS="$oldIFS"

  for index in "${!lines[@]}"
  do
    diplay_index=$(($index + 1))

    for fileIndex in "${!files[@]}"
    do
      if [ "$diplay_index" == "${files[fileIndex]}" ]
        then
          echo "$diplay_index ${lines[index]}"
          git add ${lines[index]}
        fi
    done
  done
}

function log {
  num_commits=10
  if [ -n "$1" ] 
  then
    num_commits=$1
  fi

  git log -n $num_commits --graph --abbrev-commit --decorate --format=format:' %C(bold yellow)%an%C(reset) - %C(bold green)%ar%C(reset)%C(bold blue)%d%C(reset)%n''  %C(black)%s%C(reset)' --all
}

function parse_git_branch {
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \(\1\)/'
}